import:
  ch.njol.skript.lang.Variable
  java.util.Properties
  org.bukkit.Bukkit

effect skp get the latest version of %string% and store it in %~object%:
  parse:
    expr-2 is an instance of Variable
    continue
  trigger:
    delay effect
    # load the addon repo list
    set {_prop} to skp_get_addon_properties()

    set {_repo} to {_prop}.getProperty((lowercase expr-1))
    skp send a "GET" request to "https://api.github.com/repos/%{_repo}%/releases/latest" and store it in {_response}

    # read the response
    set {_ver} to skp_read_response({_response}, "github_version")
    set raw expr-2 to {_ver}
    continue

effect skp check the updates for all (:addons|:dependencies) and store it in %~objects%:
  parse:
    expr-1 is an instance of Variable
    continue
    
  trigger:
    delay effect
    # load the addon link list
    set {_prop} to skp_get_addon_properties()
    
    add "" to {_send::*}
    
    if parse tags contain "addons":
      set {_plugins::*} to skp_get_skript_addons()
      set {_title} to "Addons"
    else:
      set {_plugins::*} to skp_get_skript_dependencies(true)
      set {_title} to "Dependencies"
           
    loop {_plugins::*}:
      # if the plugin is avaliable in the properties file, check for updates
      set {_addon} to lowercase loop-value
      if {_prop}.getProperty({_addon}) is set:
        set {_current} to Bukkit.getPluginManager().getPlugin(loop-value).getDescription().getVersion()
        skp get the latest version of loop-value and store it in {_latest}
        if skp_version_is_outdated({_current}, {_latest}) is true: # outdated
          add " &7[&c⬤&7] &f%loop-value% &7(%{_current}% -> %{_latest}%)" to {_send::*}
        else: # up to date
          add " &7[&a⬤&7] &f%loop-value% &7(%{_current}%)" to {_send::*}
      else: # unknown
        add " &7[&6⬤&7] &f%loop-value% &7(%{_current}%)" to {_send::*}
    set {_count} to (size of {_send::*}) - 1
    set {_send::1} to "&f%{_title}% [%{_count}%] &a[Up to Date] &c[Outdated] &6[Unknown]"
    set raw expr-1 to {_send::*}
    continue

function skp_version_is_outdated(v1: string, v2: string) :: boolean:
  set {_v1} to (join (regex split {_v1} at "[^0-9.]") with "")
  set {_v2} to (join (regex split {_v2} at "[^0-9.]") with "")
  set {_v1::*} to {_v1} split at "."
  set {_v2::*} to {_v2} split at "."
  loop max((size of {_v1::*}), (size of {_v2::*})) times:
    if (({_v1::%loop-value%} parsed as number) ? 0) < (({_v2::%loop-value%} parsed as number) ? 0):
      return true
  return false